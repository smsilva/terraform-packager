#!/bin/bash
COMMAND="$@"

THIS_SCRIPT="${0}"
THIS_SCRIPT_FOLDER="$(dirname "${THIS_SCRIPT}")"
TEMPLATES_FOLDER="${THIS_SCRIPT_FOLDER}/../templates"

if [ -z "${COMMAND?}" ]; then
  echo "Command not informed."
  exit 1
fi

export DEBUG=${DEBUG-1}
LOCAL_TERRAFORM_VARIABLES_DIRECTORY="${LOCAL_TERRAFORM_VARIABLES_DIRECTORY-${PWD}}"
LOCAL_TERRAFORM_VARIABLES_DIRECTORY_EXTRA="${LOCAL_TERRAFORM_VARIABLES_DIRECTORY_EXTRA}"
LOCAL_EXTRA_VOLUMES="${LOCAL_EXTRA_VOLUMES}"
LOCAL_TERRAFORM_OUTPUT_DIRECTORY="${LOCAL_TERRAFORM_OUTPUT_DIRECTORY-${HOME}/trash/terraform/output}"

export TERRAFORM_STATE_FILE="${TERRAFORM_STATE_FILE-terraform.state}"
LOCAL_TERRAFORM_STATE_FILE="${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}/${TERRAFORM_STATE_FILE}"

# Generate empty folder and files to prevent creation as root user
mkdir -p "${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}"
touch "${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}/plan_detailed_exitcode"
touch "${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}/terraform.plan"
touch "${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}/terraform.plan.json"
touch "${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}/terraform.plan.txt"
mkdir -p $(dirname "${LOCAL_TERRAFORM_STATE_FILE}")
touch "${LOCAL_TERRAFORM_STATE_FILE}"

STACK_RUN_GENERATED_SCRIPT="${HOME}/.stackrun_generated.sh"

if [ "${DEBUG}" -gt 0 ]; then
  echo ""
  echo "Stack Runner"
  echo ""
  echo "  terraform:"
  echo "    command:                ${COMMAND?}"
  echo "    output:                 ${LOCAL_TERRAFORM_OUTPUT_DIRECTORY?}"
  echo "    variables:              ${LOCAL_TERRAFORM_VARIABLES_DIRECTORY?}"
  
  if [ -n "${LOCAL_TERRAFORM_VARIABLES_DIRECTORY_EXTRA}" ]; then
    echo "    variables-extra:        ${LOCAL_TERRAFORM_VARIABLES_DIRECTORY_EXTRA}"
  fi 

  if [ -n "${LOCAL_EXTRA_VOLUMES}" ]; then
    echo "    volumes-extra:          ${LOCAL_EXTRA_VOLUMES}"
  fi 
fi

generate_a_script_to_run_the_command() {
  echo "#!/bin/bash"
  echo "LOCAL_TERRAFORM_VARIABLES_DIRECTORY=${LOCAL_TERRAFORM_VARIABLES_DIRECTORY}"
  echo "LOCAL_TERRAFORM_OUTPUT_DIRECTORY=${LOCAL_TERRAFORM_OUTPUT_DIRECTORY}"

  echo ""

  cat "${TEMPLATES_FOLDER?}/stackrun.conf"

  TF_PACKAGER_AZURE_ACCESS_TOKEN_FILE="${TF_PACKAGER_AZURE_ACCESS_TOKEN_FILE-${HOME}/.azure/access_token.json}"
  TF_PACKAGER_AZURE_PROFILE_FILE="${TF_PACKAGER_AZURE_PROFILE_FILE-${HOME}/.azure/azureProfile.json}"
  TF_PACKAGER_AZURE_MSAL_TOKEN_CACHE_FILE="${TF_PACKAGER_AZURE_MSAL_TOKEN_CACHE_FILE-${HOME}/.azure/msal_token_cache.json}"

  # If Azure credentials are not informed, but the az-cli files are present, use them to authenticate az-cli
  if [[ -f "${TF_PACKAGER_AZURE_ACCESS_TOKEN_FILE}"     ]] && \
     [[ -f "${TF_PACKAGER_AZURE_PROFILE_FILE}"          ]] && \
     [[ -f "${TF_PACKAGER_AZURE_MSAL_TOKEN_CACHE_FILE}" ]]; then
    cat <<EOF
  -v "${TF_PACKAGER_AZURE_ACCESS_TOKEN_FILE}:/root/.azure/accessTokens.json" \\
  -v "${TF_PACKAGER_AZURE_PROFILE_FILE}:/root/.azure/azureProfile.json" \\
  -v "${TF_PACKAGER_AZURE_MSAL_TOKEN_CACHE_FILE}:/root/.azure/msal_token_cache.json" \\
EOF
  fi

  if [ -d "${LOCAL_TERRAFORM_VARIABLES_DIRECTORY_EXTRA}" ]; then
    while read FILE_NAME; do
      if [ -f "${FILE_NAME}" ]; then
        BASE_FILE_NAME="$(basename "${FILE_NAME}")"
        COMMAND_VOLUME="$(printf '"%s:/opt/src/%s"' "${FILE_NAME}" "${BASE_FILE_NAME}")"
        echo "  -v ${COMMAND_VOLUME} \\"
      fi
    done <<< "$(find ${LOCAL_TERRAFORM_VARIABLES_DIRECTORY_EXTRA} -type f | xargs -n 1)"
  fi

  if [ -d "${LOCAL_EXTRA_VOLUMES}" ]; then
      echo "${LOCAL_EXTRA_VOLUMES}" \
      | tr ";" "\n" \
      | while read VOLUME_FILE; do
      echo "  -v ${VOLUME_FILE} \\"
      done
  fi

  printenv | grep "^TF_VAR_" | cut -d= -f1 | xargs -I '{}' echo ' -e {}="${{}}"\'

  (
    for CREDENTIALS_FILE in $(find "${TEMPLATES_FOLDER?}/provider" -name credentials_run.conf); do
      cat "${CREDENTIALS_FILE}"
    done

    for CREDENTIALS_FILE in $(find "${TEMPLATES_FOLDER?}/backend" -name credentials_run.conf); do
      cat "${CREDENTIALS_FILE}"
    done
  ) | sort --unique

  echo "${COMMAND?}"
}

generate_a_script_to_run_the_command > "${STACK_RUN_GENERATED_SCRIPT}"

chmod +x "${STACK_RUN_GENERATED_SCRIPT}"

if [ "${DEBUG}" -gt 1 ]; then
  echo ""
  echo "Stack Runner Command"
  echo ""
  echo "  ${STACK_RUN_GENERATED_SCRIPT}: |"
  awk '{ print "    " $0 }' < "${STACK_RUN_GENERATED_SCRIPT}"
fi

"${STACK_RUN_GENERATED_SCRIPT}" \
| sed \
    -e '/You may now begin working with Terraform/,/commands will detect it and remind you to do so if necessary./d' \
    -e '/Terraform used the selected providers/,/Resource actions are indicated with the following symbols:/d' \
    -e '/Successfully configured the backend/,/unless the backend configuration changes./d' \
    -e '/To perform exactly these actions/,/terraform apply "\/opt\/output\/terraform.plan\"/d'

exit ${PIPESTATUS[0]}
