#!/bin/bash
TF_PACKAGER_RUN_SCRIPT="${1}"

TF_PACKAGER_ENVIRONMENT_VARIABLES_BASE_FILE_NAME="environment_variables.conf"
TF_PACKAGER_TEMPORARY_DIRECTORY="${HOME}/.terraform-packager"
TF_PACKAGER_TEMPORARY_BUILD_CONTEXT_DIRECTORY="${TF_PACKAGER_TEMPORARY_DIRECTORY}"
TF_PACKAGER_TEMPLATES_DIRECTORY="${TF_PACKAGER_ROOT_DIRECTORY}/templates"
TF_PACKAGER_SCRIPTS_DIRECTORY_BUILD="${TF_PACKAGER_TEMPLATES_DIRECTORY}/scripts"
TF_PACKAGER_ENVIRONMENT_VARIABLES_FILE_NAME_TEMPLATE="${TF_PACKAGER_TEMPLATES_DIRECTORY}/${TF_PACKAGER_ENVIRONMENT_VARIABLES_BASE_FILE_NAME}"
TF_PACKAGER_ENVIRONMENT_VARIABLES_FILE_NAME="${TF_PACKAGER_TEMPORARY_BUILD_CONTEXT_DIRECTORY}/${TF_PACKAGER_ENVIRONMENT_VARIABLES_BASE_FILE_NAME}"
TF_PACKAGER_STACK_CONFIG_YAML_FILE="${TF_PROJECT_DIRECTORY}/stack.yaml"
TF_PACKAGER_SOURCE_CODE_COMMITIZEN_FILE="${TF_PROJECT_DIRECTORY}/cz.yaml"
TF_PACKAGER_SOURCE_CODE_PROVIDER_FILE="${TF_SOURCE_CODE_DIRECTORY}/provider.tf"
TF_PACKAGER_SOURCE_CODE_TFVARS_FILE="${TF_SOURCE_CODE_DIRECTORY}/terraform.tfvars"
TF_SOURCE_CODE_TFP_SCRIPTS_DIRECTORY="${TF_PROJECT_DIRECTORY?}/.tfp/scripts"

export TF_PACKAGER_TEMPORARY_DIRECTORY
export TF_PACKAGER_RUN_SCRIPT
export TF_PACKAGER_ROOT_DIRECTORY
export TF_PACKAGER_SCRIPTS_DIRECTORY_BUILD
export TF_PACKAGER_ENVIRONMENT_VARIABLES_FILE_NAME_TEMPLATE
export TF_PACKAGER_ENVIRONMENT_VARIABLES_FILE_NAME
export TF_PACKAGER_TEMPLATES_DIRECTORY
export TF_SOURCE_CODE_DIRECTORY
export TF_SOURCE_CODE_TFP_SCRIPTS_DIRECTORY
export TF_PACKAGER_SOURCE_CODE_PROVIDER_FILE
export TF_PACKAGER_SOURCE_CODE_TFVARS_FILE
export TF_PACKAGER_SOURCE_CODE_STACK_CONFIG_FILE
export TF_PACKAGER_TEMPORARY_BUILD_CONTEXT_DIRECTORY

mkdir -p "${TF_PACKAGER_TEMPORARY_DIRECTORY}"

if ! [ -e "${TF_PACKAGER_STACK_CONFIG_YAML_FILE}" ]; then
  echo "A file 'stack.yaml' should exists into Root Stack Directory."
  exit 1
fi

STACK_NAME=$(grep "^name:" "${TF_PACKAGER_STACK_CONFIG_YAML_FILE}" | awk '{ print $2}' | tr -d " ")
STACK_VERSION=$(grep "^version:" "${TF_PACKAGER_STACK_CONFIG_YAML_FILE}" | awk '{ print $2}' | tr -d " ")
STACK_MAINTAINER=$(grep "^maintainer:" "${TF_PACKAGER_STACK_CONFIG_YAML_FILE}" | awk '{ print $2}' | tr -d " ")
STACK_BUILD_TIME=$(date --utc +%FT%TZ)

if [[ -z "${STACK_VERSION}" || "${STACK_VERSION}" == "null" ]]; then
  if [ -e "${TF_PACKAGER_SOURCE_CODE_COMMITIZEN_FILE}" ]; then
    STACK_VERSION=$(grep "^  version:" "${TF_PACKAGER_SOURCE_CODE_COMMITIZEN_FILE}" | awk '{ print $2}' | tr -d " ")
  else
    if [ -e "${TF_PROJECT_DIRECTORY?}/.git" ]; then
      STACK_VERSION="$(git -C "${TF_PROJECT_DIRECTORY?}" log -1 --pretty=%h)"
    fi
  fi
fi

if [[ -z "${STACK_VERSION}" || "${STACK_VERSION}" == "null" ]]; then
  STACK_VERSION="latest"
fi

if [[ -z "${STACK_MAINTAINER}" || "${STACK_MAINTAINER}" == "null" ]]; then
  STACK_MAINTAINER="Unknown"
fi

TERRAFORM_VERSION=$( grep "^  version:" "${TF_PACKAGER_STACK_CONFIG_YAML_FILE}" | awk '{ print $2}' | tr -d " ")
TERRAFORM_BACKEND=$( grep "^  backend:" "${TF_PACKAGER_STACK_CONFIG_YAML_FILE}" | awk '{ print $2}' | tr -d " ")
TERRAFORM_PROVIDER=$(grep "^provider"   "${TF_PACKAGER_SOURCE_CODE_PROVIDER_FILE?}" | grep --only-matching --perl-regexp --max-count 1 '(?<=\")(.*)(?=\")')
TERRAFORM_PROVIDER_LIST=$(grep "^provider" "${TF_PACKAGER_SOURCE_CODE_PROVIDER_FILE?}" | grep --only-matching --perl-regexp '(?<=\")(.*)(?=\")' | sort --unique)

TERRAFORM_BACKEND_TEMPLATE_CREDENTIALS_FILE="${TF_PACKAGER_TEMPLATES_DIRECTORY}/backend/${TERRAFORM_BACKEND}/credentials_build.conf"
TERRAFORM_BACKEND_TEMPLATE_FILE="${TF_PACKAGER_TEMPLATES_DIRECTORY}/backend/${TERRAFORM_BACKEND}/backend.conf"
TERRAFORM_BACKEND_TEMPLATE_FRAGMENT="${TF_PACKAGER_TEMPLATES_DIRECTORY}/backend/${TERRAFORM_BACKEND}/backend.hcl"

export STACK_NAME
export STACK_VERSION
export STACK_BUILD_TIME
export STACK_MAINTAINER
export STACK_INSTANCE_NAME=${STACK_INSTANCE_NAME-default}

export TERRAFORM_VERSION
export TERRAFORM_PROVIDER
export TERRAFORM_PROVIDER_LIST

export TERRAFORM_BACKEND
export TERRAFORM_BACKEND_TEMPLATE_FILE
export TERRAFORM_BACKEND_TEMPLATE_FRAGMENT
export TERRAFORM_BACKEND_TEMPLATE_CREDENTIALS_FILE
